el problema del productor y consumidor utilizando `Locks` y `Conditions` para la sincronización entre hilos:

1. Se define una clase `Buffer` que representa el búfer compartido entre el productor y el consumidor. Esta clase tiene una cola para almacenar los elementos, un tamaño máximo, un `Lock` y dos `Conditions` para la sincronización entre hilos.
2. La clase `Buffer` tiene dos métodos principales: `agregar` y `quitar`. El método `agregar` agrega un elemento a la cola si no está llena y notifica al consumidor que hay un elemento disponible. Si la cola está llena, el productor espera hasta que haya espacio disponible. El método `quitar` quita un elemento de la cola si no está vacía y notifica al productor que hay espacio disponible. Si la cola está vacía, el consumidor espera hasta que haya un elemento disponible.
3. Se definen dos clases `Productor` y `Consumidor` que implementan la interfaz `Runnable`. Cada una de estas clases tiene una referencia al mismo objeto `Buffer`.
4. La clase `Productor` tiene un método `run` que agrega elementos al `Buffer` utilizando el método `agregar`.
5. La clase `Consumidor` tiene un método `run` que quita elementos del `Buffer` utilizando el método `quitar`.
6. En el método principal, se crea un objeto `Buffer` con un tamaño máximo de 5 elementos.
7. Luego, se crean dos hilos: uno para el productor y otro para el consumidor, pasándoles como argumento el mismo objeto `Buffer`.
8. Finalmente, se inician los dos hilos con el método `start`.

Este programa crea un Buffer compartido con un tamaño máximo de 5 elementos. Luego, se crean un hilo Productor y un hilo Consumidor que comparten el mismo Buffer. El hilo Productor agrega elementos al Buffer mientras que el hilo Consumidor los quita. Los métodos agregar y quitar del Buffer utilizan un Lock y dos Conditions para garantizar la sincronización adecuada entre los hilos.